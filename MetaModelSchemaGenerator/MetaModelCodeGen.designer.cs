// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace MetaModelSchemaGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class MetaModelCodeGen : MetaModelCodeGenBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("//=============================================================================\r\n" +
                    "// This code is automatically generated.\r\n//====================================" +
                    "=========================================\r\n");
            
            #line 10 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"

    string accessLvl = IsPublic ? "public" : "internal";

            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.CodeDom.Compiler;\r\nusing System.Runtime.InteropServic" +
                    "es;\r\n\r\nnamespace PEReader.ClrMetadata.CoreCLR\r\n{\r\n    #region Record Types\r\n\r\n");
            
            #line 21 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  foreach (Table tbl in Schema.Tables)
    {

            
            #line default
            #line hidden
            this.Write("    [GeneratedCode(\"MetaModelSchemaGenerator\", \"1.0\")]\r\n    [StructLayout(LayoutK" +
                    "ind.Sequential, Pack = 2)]\r\n    ");
            
            #line 26 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(accessLvl));
            
            #line default
            #line hidden
            this.Write(" struct ");
            
            #line 26 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl.Name));
            
            #line default
            #line hidden
            this.Write("Rec\r\n    {\r\n");
            
            #line 28 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      int field = 0;
        foreach (ColumnBase col in tbl.Columns)
        {

            
            #line default
            #line hidden
            this.Write("        public const int COL_");
            
            #line 32 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 32 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field++));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 33 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      } 
            
            #line default
            #line hidden
            this.Write("        public const int COL_COUNT = ");
            
            #line 34 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field++));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 35 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      if (tbl.HasKeyField)
        {

            
            #line default
            #line hidden
            this.Write("        public const int COL_KEY = COL_");
            
            #line 38 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl.Key));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 39 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      }
        else
        {

            
            #line default
            #line hidden
            this.Write("        public const int COL_KEY = ");
            
            #line 43 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field++));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 44 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 46 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      foreach (ColumnBase col in tbl.Columns)
        {
            if (col.Type == ColumnType.Fixed)
            {

            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 51 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TypeString(((ItemColumn)col).ItemType)));
            
            #line default
            #line hidden
            this.Write(" m_");
            
            #line 51 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 52 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
          }
        } 
            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n");
            
            #line 56 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  } 
            
            #line default
            #line hidden
            this.Write("    #endregion\r\n    \r\n    #region Full Record Types\r\n\r\n    // CS0649 field is nev" +
                    "er assigned\r\n    // disable since these are populated through reflection.\r\n    #" +
                    "pragma warning disable 0649\r\n\r\n");
            
            #line 65 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  foreach (Table tbl in Schema.Tables)
    {

            
            #line default
            #line hidden
            this.Write("    [GeneratedCode(\"MetaModelSchemaGenerator\", \"1.0\")]\r\n    ");
            
            #line 69 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(accessLvl));
            
            #line default
            #line hidden
            this.Write(" sealed class ");
            
            #line 69 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl.Name));
            
            #line default
            #line hidden
            this.Write("Rec_Full : IMetadataRecord\r\n    {\r\n");
            
            #line 71 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      int field = 0;
        foreach (ColumnBase col in tbl.Columns)
        {

            
            #line default
            #line hidden
            this.Write("        [ColumnIndex(");
            
            #line 75 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ColumnTypeAttrParams(field++, col)));
            
            #line default
            #line hidden
            this.Write(")]\r\n        public ");
            
            #line 76 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FullRecordTypeString(col)));
            
            #line default
            #line hidden
            this.Write(" m_");
            
            #line 76 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 78 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      } 
            
            #line default
            #line hidden
            this.Write("\r\n        public long Key\r\n        {\r\n            get\r\n            {\r\n");
            
            #line 84 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      if (tbl.HasKeyField)
        {

            
            #line default
            #line hidden
            this.Write("                return m_");
            
            #line 87 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl.Key));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 88 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      }
        else
        {

            
            #line default
            #line hidden
            this.Write("                throw new InvalidOperationException(\"The ");
            
            #line 92 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl.Name));
            
            #line default
            #line hidden
            this.Write(" table does not define a key field.\");\r\n");
            
            #line 93 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      }

            
            #line default
            #line hidden
            this.Write("            }\r\n        }\r\n    }\r\n\r\n");
            
            #line 99 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n    #pragma warning restore 0649\r\n\r\n    #endregion\r\n\r\n    #region Schema Enums\r" +
                    "\n\r\n    ");
            
            #line 107 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(accessLvl));
            
            #line default
            #line hidden
            this.Write(" enum ClrTable\r\n    {\r\n");
            
            #line 109 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  foreach (TBL tbl in Enum.GetValues(typeof(TBL)))
    {

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 112 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 113 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  }

            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n    ");
            
            #line 117 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(accessLvl));
            
            #line default
            #line hidden
            this.Write(" enum ClrCodedToken\r\n    {\r\n");
            
            #line 119 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  foreach (CodedToken cdtkn in Schema.CodedTokens)
    {

            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 122 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cdtkn.Name));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 123 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  }

            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n    #endregion\r\n\r\n    #region Schema Definitions\r\n    \r\n    [GeneratedCo" +
                    "de(\"MetaModelSchemaGenerator\", \"1.0\")]\r\n    ");
            
            #line 132 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(accessLvl));
            
            #line default
            #line hidden
            this.Write(" static class MetaModel\r\n    {\r\n        public const int MajorVersion = ");
            
            #line 134 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Schema.MajorVersion));
            
            #line default
            #line hidden
            this.Write(";\r\n        public const int MinorVersion = ");
            
            #line 135 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Schema.MinorVersion));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n        #region Constants\r\n\r\n");
            
            #line 139 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  foreach (ItemType val in Enum.GetValues(typeof(ItemType)))
    {

            
            #line default
            #line hidden
            this.Write("        public const int i");
            
            #line 142 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(val));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 142 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((int)val));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 143 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 145 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  foreach (CDTKN val in Enum.GetValues(typeof(CDTKN)))
    {

            
            #line default
            #line hidden
            this.Write("        public const int CDTKN_");
            
            #line 148 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(val));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 148 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((int)val));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 149 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  } 
            
            #line default
            #line hidden
            this.Write("        public const int CDTKN_COUNT = ");
            
            #line 150 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Enum.GetValues(typeof(CDTKN)).Length));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 152 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  foreach (TBL val in Enum.GetValues(typeof(TBL)))
    {

            
            #line default
            #line hidden
            this.Write("        public const int TBL_");
            
            #line 155 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(val));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 155 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((int)val));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 156 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  } 
            
            #line default
            #line hidden
            this.Write("        public const int TBL_COUNT = ");
            
            #line 157 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Enum.GetValues(typeof(TBL)).Length));
            
            #line default
            #line hidden
            this.Write(";\r\n        public const int TBL_COUNT_V1 = TBL_NestedClass + 1;\r\n        public c" +
                    "onst int TBL_COUNT_V2 = TBL_GenericParamConstraint + 1;\r\n\r\n        #endregion\r\n\r" +
                    "\n\r\n        #region Column Definitions\r\n\r\n");
            
            #line 166 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  foreach (Table tbl in Schema.Tables)
    {
        int offset = 0;

            
            #line default
            #line hidden
            this.Write("        public static readonly CMiniColDef[] r");
            
            #line 170 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl.Name));
            
            #line default
            #line hidden
            this.Write("Cols = {\r\n");
            
            #line 171 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      foreach (ColumnBase col in tbl.Columns)
        {
            if (col.Type == ColumnType.Fixed)
            {
                var itemCol = (ItemColumn)col;
                int sz = TypeSize(itemCol.ItemType);

            
            #line default
            #line hidden
            this.Write("            new CMiniColDef(i");
            
            #line 178 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(itemCol.ItemType));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 178 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(offset));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 178 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sz));
            
            #line default
            #line hidden
            this.Write("),\r\n");
            
            #line 179 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
              offset += sz;
            }
            else if (col.Type == ColumnType.Rid)
            {
                var ridCol = (RidColumn)col;

            
            #line default
            #line hidden
            this.Write("            new CMiniColDef(TBL_");
            
            #line 185 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ridCol.Table));
            
            #line default
            #line hidden
            this.Write("),\r\n");
            
            #line 186 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
          }
            else if (col.Type == ColumnType.String)
            {

            
            #line default
            #line hidden
            this.Write("            new CMiniColDef(iSTRING),\r\n");
            
            #line 191 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
          }
            else if (col.Type == ColumnType.Guid)
            {

            
            #line default
            #line hidden
            this.Write("            new CMiniColDef(iGUID),\r\n");
            
            #line 196 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
          }
            else if (col.Type == ColumnType.Blob)
            {

            
            #line default
            #line hidden
            this.Write("            new CMiniColDef(iBLOB),\r\n");
            
            #line 201 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
          }
            else if (col.Type == ColumnType.CodedToken)
            {
                var cdtknCol = (CodedTokenColumn)col;

            
            #line default
            #line hidden
            this.Write("            new CMiniColDef(iCodedToken+CDTKN_");
            
            #line 206 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cdtknCol.Token));
            
            #line default
            #line hidden
            this.Write("),\r\n");
            
            #line 207 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
          } 
        }

            
            #line default
            #line hidden
            this.Write("        };\r\n\r\n");
            
            #line 212 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  } 

            
            #line default
            #line hidden
            this.Write("        #endregion\r\n\r\n        #region Column Name Definitions\r\n\r\n");
            
            #line 218 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  foreach (Table tbl in Schema.Tables)
    {

            
            #line default
            #line hidden
            this.Write("        public static readonly string[] r");
            
            #line 221 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl.Name));
            
            #line default
            #line hidden
            this.Write("ColNames = {\r\n");
            
            #line 222 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      foreach (ColumnBase col in tbl.Columns)
        {

            
            #line default
            #line hidden
            this.Write("            \"");
            
            #line 225 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(col.Name));
            
            #line default
            #line hidden
            this.Write("\",\r\n");
            
            #line 226 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      } 
            
            #line default
            #line hidden
            this.Write("        };\r\n\r\n");
            
            #line 229 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n        #endregion\r\n\r\n\r\n        #region Coded Token Definitions\r\n\r\n");
            
            #line 236 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  foreach (CodedToken cdtkn in Schema.CodedTokens)
    {

            
            #line default
            #line hidden
            this.Write("        public static readonly CorTokenType[] mdt");
            
            #line 239 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cdtkn.Name));
            
            #line default
            #line hidden
            this.Write(" = {\r\n");
            
            #line 240 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      foreach (string table in cdtkn.Tables)
        {
            if (table.Length > 1)
            {

            
            #line default
            #line hidden
            this.Write("            CorTokenType.mdt");
            
            #line 245 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 246 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"

            }
            else
            {

            
            #line default
            #line hidden
            this.Write("            0,\r\n");
            
            #line 252 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
          }

            
            #line default
            #line hidden
            
            #line 254 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
      } 
            
            #line default
            #line hidden
            this.Write("        };\r\n\r\n");
            
            #line 257 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n        public static readonly CCodedTokenDef[] g_CodedTokens = {\r\n");
            
            #line 260 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  foreach (CodedToken cdtkn in Schema.CodedTokens)
    {

            
            #line default
            #line hidden
            this.Write("            new CCodedTokenDef(mdt");
            
            #line 263 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cdtkn.Name));
            
            #line default
            #line hidden
            this.Write(", \"");
            
            #line 263 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cdtkn.Name));
            
            #line default
            #line hidden
            this.Write("\"),\r\n");
            
            #line 264 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  } 
            
            #line default
            #line hidden
            this.Write("        };\r\n\r\n        #endregion\r\n\r\n\r\n        #region Table Definitions\r\n\r\n      " +
                    "  public static readonly CMiniTableDefEx[] g_Tables = new CMiniTableDefEx[TBL_CO" +
                    "UNT] {\r\n");
            
            #line 273 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  foreach (TBL tbl in Enum.GetValues(typeof(TBL)))
    {

            
            #line default
            #line hidden
            this.Write("            new CMiniTableDefEx(r");
            
            #line 276 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl));
            
            #line default
            #line hidden
            this.Write("Cols, ");
            
            #line 276 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl));
            
            #line default
            #line hidden
            this.Write("Rec.COL_KEY, 0, r");
            
            #line 276 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl));
            
            #line default
            #line hidden
            this.Write("ColNames, \"");
            
            #line 276 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl));
            
            #line default
            #line hidden
            this.Write("\", typeof(");
            
            #line 276 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl));
            
            #line default
            #line hidden
            this.Write("Rec_Full)),\r\n");
            
            #line 277 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  }

            
            #line default
            #line hidden
            this.Write(@"        };

        public static readonly CMiniTableDefEx g_Table_GenericParamV1_1 = 
            new CMiniTableDefEx(rGenericParamV1_1Cols, GenericParamV1_1Rec.COL_KEY, 0, rGenericParamV1_1ColNames, ""GenericParamV1_"", typeof(GenericParamV1_1Rec_Full));

        #endregion
    }

    #endregion
}

namespace PEReader.ClrMetadata
{
    using PEReader.ClrMetadata.CoreCLR;

    #region ClrMetadataAccessor Table Properties

    sealed partial class ClrMetadataAccessor
    {
");
            
            #line 298 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  foreach (TBL tbl in Enum.GetValues(typeof(TBL)))
    {

            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// Gets the ");
            
            #line 302 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl));
            
            #line default
            #line hidden
            this.Write(" table.\r\n        /// </summary>\r\n        [GeneratedCode(\"MetaModelSchemaGenerator" +
                    "\", \"1.0\")]\r\n        internal MetadataTable<");
            
            #line 305 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl));
            
            #line default
            #line hidden
            this.Write("Rec_Full> ");
            
            #line 305 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl));
            
            #line default
            #line hidden
            this.Write("Table\r\n        {\r\n            get { return (MetadataTable<");
            
            #line 307 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tbl));
            
            #line default
            #line hidden
            this.Write("Rec_Full>)(_tables[");
            
            #line 307 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((int)tbl));
            
            #line default
            #line hidden
            this.Write("]); }\r\n        }\r\n\r\n");
            
            #line 310 "E:\Projects\PEReader\MetaModelSchemaGenerator\MetaModelCodeGen.tt"
  }

            
            #line default
            #line hidden
            this.Write("    }\r\n\r\n    #endregion\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class MetaModelCodeGenBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
