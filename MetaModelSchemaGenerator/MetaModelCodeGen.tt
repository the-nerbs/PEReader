<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".designer.cs" #>
//=============================================================================
// This code is automatically generated.
//=============================================================================
<#
    string accessLvl = IsPublic ? "public" : "internal";
#>
using System;
using System.CodeDom.Compiler;
using System.Runtime.InteropServices;

namespace PEReader.ClrMetadata.CoreCLR
{
    #region Record Types

<#  foreach (Table tbl in Schema.Tables)
    {
#>
    [GeneratedCode("MetaModelSchemaGenerator", "1.0")]
    [StructLayout(LayoutKind.Sequential, Pack = 2)]
    <#= accessLvl #> struct <#= tbl.Name #>Rec
    {
<#      int field = 0;
        foreach (ColumnBase col in tbl.Columns)
        {
#>
        public const int COL_<#= col.Name #> = <#= field++ #>;
<#      } #>
        public const int COL_COUNT = <#= field++ #>;
<#      if (tbl.HasKeyField)
        {
#>
        public const int COL_KEY = COL_<#= tbl.Key #>;
<#      }
        else
        {
#>
        public const int COL_KEY = <#= field++ #>;
<#      } #>

<#      foreach (ColumnBase col in tbl.Columns)
        {
            if (col.Type == ColumnType.Fixed)
            {
#>
        public <#= TypeString(((ItemColumn)col).ItemType) #> m_<#= col.Name #>;
<#          }
        } #>
    }

<#  } #>
    #endregion
    
    #region Full Record Types

    // CS0649 field is never assigned
    // disable since these are populated through reflection.
    #pragma warning disable 0649

<#  foreach (Table tbl in Schema.Tables)
    {
#>
    [GeneratedCode("MetaModelSchemaGenerator", "1.0")]
    <#= accessLvl #> sealed class <#= tbl.Name #>Rec_Full : IMetadataRecord
    {
<#      int field = 0;
        foreach (ColumnBase col in tbl.Columns)
        {
#>
        [ColumnIndex(<#= ColumnTypeAttrParams(field++, col) #>)]
        public <#= FullRecordTypeString(col) #> m_<#= col.Name #>;

<#      } #>

        public long Key
        {
            get
            {
<#      if (tbl.HasKeyField)
        {
#>
                return m_<#= tbl.Key #>;
<#      }
        else
        {
#>
                throw new InvalidOperationException("The <#= tbl.Name #> table does not define a key field.");
<#      }
#>
            }
        }
    }

<#  } #>

    #pragma warning restore 0649

    #endregion

    #region Schema Enums

    <#= accessLvl #> enum ClrTable
    {
<#  foreach (TBL tbl in Enum.GetValues(typeof(TBL)))
    {
#>
        <#= tbl #>,
<#  }
#>
    }

    <#= accessLvl #> enum ClrCodedToken
    {
<#  foreach (CodedToken cdtkn in Schema.CodedTokens)
    {
#>
        <#= cdtkn.Name #>,
<#  }
#>
    }

    #endregion

    #region Schema Definitions
    
    [GeneratedCode("MetaModelSchemaGenerator", "1.0")]
    <#= accessLvl #> static class MetaModel
    {
        public const int MajorVersion = <#= Schema.MajorVersion #>;
        public const int MinorVersion = <#= Schema.MinorVersion #>;

        #region Constants

<#  foreach (ItemType val in Enum.GetValues(typeof(ItemType)))
    {
#>
        public const int i<#= val #> = <#= (int)val #>;
<#  } #>

<#  foreach (CDTKN val in Enum.GetValues(typeof(CDTKN)))
    {
#>
        public const int CDTKN_<#= val #> = <#= (int)val #>;
<#  } #>
        public const int CDTKN_COUNT = <#= Enum.GetValues(typeof(CDTKN)).Length #>;

<#  foreach (TBL val in Enum.GetValues(typeof(TBL)))
    {
#>
        public const int TBL_<#= val #> = <#= (int)val #>;
<#  } #>
        public const int TBL_COUNT = <#= Enum.GetValues(typeof(TBL)).Length #>;
        public const int TBL_COUNT_V1 = TBL_NestedClass + 1;
        public const int TBL_COUNT_V2 = TBL_GenericParamConstraint + 1;

        #endregion


        #region Column Definitions

<#  foreach (Table tbl in Schema.Tables)
    {
        int offset = 0;
#>
        public static readonly CMiniColDef[] r<#= tbl.Name #>Cols = {
<#      foreach (ColumnBase col in tbl.Columns)
        {
            if (col.Type == ColumnType.Fixed)
            {
                var itemCol = (ItemColumn)col;
                int sz = TypeSize(itemCol.ItemType);
#>
            new CMiniColDef(i<#= itemCol.ItemType #>, <#= offset #>, <#= sz #>),
<#              offset += sz;
            }
            else if (col.Type == ColumnType.Rid)
            {
                var ridCol = (RidColumn)col;
#>
            new CMiniColDef(TBL_<#= ridCol.Table #>),
<#          }
            else if (col.Type == ColumnType.String)
            {
#>
            new CMiniColDef(iSTRING),
<#          }
            else if (col.Type == ColumnType.Guid)
            {
#>
            new CMiniColDef(iGUID),
<#          }
            else if (col.Type == ColumnType.Blob)
            {
#>
            new CMiniColDef(iBLOB),
<#          }
            else if (col.Type == ColumnType.CodedToken)
            {
                var cdtknCol = (CodedTokenColumn)col;
#>
            new CMiniColDef(iCodedToken+CDTKN_<#= cdtknCol.Token #>),
<#          } 
        }
#>
        };

<#  } 
#>
        #endregion

        #region Column Name Definitions

<#  foreach (Table tbl in Schema.Tables)
    {
#>
        public static readonly string[] r<#= tbl.Name #>ColNames = {
<#      foreach (ColumnBase col in tbl.Columns)
        {
#>
            "<#= col.Name #>",
<#      } #>
        };

<#  } #>

        #endregion


        #region Coded Token Definitions

<#  foreach (CodedToken cdtkn in Schema.CodedTokens)
    {
#>
        public static readonly CorTokenType[] mdt<#= cdtkn.Name #> = {
<#      foreach (string table in cdtkn.Tables)
        {
            if (table.Length > 1)
            {
#>
            CorTokenType.mdt<#= table #>,
<#
            }
            else
            {
#>
            0,
<#          }
#>
<#      } #>
        };

<#  } #>

        public static readonly CCodedTokenDef[] g_CodedTokens = {
<#  foreach (CodedToken cdtkn in Schema.CodedTokens)
    {
#>
            new CCodedTokenDef(mdt<#= cdtkn.Name #>, "<#= cdtkn.Name #>"),
<#  } #>
        };

        #endregion


        #region Table Definitions

        public static readonly CMiniTableDefEx[] g_Tables = new CMiniTableDefEx[TBL_COUNT] {
<#  foreach (TBL tbl in Enum.GetValues(typeof(TBL)))
    {
#>
            new CMiniTableDefEx(r<#= tbl #>Cols, <#= tbl #>Rec.COL_KEY, 0, r<#= tbl #>ColNames, "<#= tbl #>", typeof(<#= tbl #>Rec_Full)),
<#  }
#>
        };

        public static readonly CMiniTableDefEx g_Table_GenericParamV1_1 = 
            new CMiniTableDefEx(rGenericParamV1_1Cols, GenericParamV1_1Rec.COL_KEY, 0, rGenericParamV1_1ColNames, "GenericParamV1_", typeof(GenericParamV1_1Rec_Full));

        #endregion
    }

    #endregion
}

namespace PEReader.ClrMetadata
{
    using PEReader.ClrMetadata.CoreCLR;

    #region ClrMetadataAccessor Table Properties

    sealed partial class ClrMetadataAccessor
    {
<#  foreach (TBL tbl in Enum.GetValues(typeof(TBL)))
    {
#>
        /// <summary>
        /// Gets the <#= tbl #> table.
        /// </summary>
        [GeneratedCode("MetaModelSchemaGenerator", "1.0")]
        internal MetadataTable<<#= tbl #>Rec_Full> <#= tbl #>Table
        {
            get { return (MetadataTable<<#= tbl #>Rec_Full>)(_tables[<#= (int)tbl #>]); }
        }

<#  }
#>
    }

    #endregion
}
